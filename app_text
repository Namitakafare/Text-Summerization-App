import streamlit as st
from langchain_community.llms import OpenAI  # Update this import
from langchain.docstore.document import Document
from langchain.text_splitter import CharacterTextSplitter
from langchain.chains.summarize import load_summarize_chain

# Function to generate a summary
def generate_response(txt, openai_api_key):
    # Instantiate the LLM model
    llm = OpenAI(temperature=0, openai_api_key=openai_api_key)
    # Split text
    text_splitter = CharacterTextSplitter()
    texts = text_splitter.split_text(txt)
    # Create multiple documents
    docs = [Document(page_content=t) for t in texts]
    # Text summarization
    chain = load_summarize_chain(llm, chain_type='map_reduce')
    return chain.run(docs)

# Page title
st.set_page_config(page_title='ðŸ¦œðŸ”— Text Summarization App')
st.title('ðŸ¦œðŸ”— Text Summarization App')

# Text input
txt_input = st.text_area('Enter your text', '', height=200)

# Form to accept user's text input for summarization
result = []
with st.form('summarize_form', clear_on_submit=True):
    openai_api_key = st.text_input('OpenAI API Key', type='password')  # Removed 'disabled'
    
    submitted = st.form_submit_button('Submit')
    if submitted:
        if not openai_api_key.startswith('sk-'):
            st.warning('Please enter a valid OpenAI API Key.')
        elif not txt_input:
            st.warning('Please enter text before submitting.')
        else:
            with st.spinner('Calculating...'):
                response = generate_response(txt_input, openai_api_key)
                result.append(response)

# Display the result
if result:
    st.info(result[0])
